/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IBaseEscrow {
  export type ImmutablesStruct = {
    orderHash: BytesLike;
    hashlock: BytesLike;
    maker: BigNumberish;
    taker: BigNumberish;
    token: BigNumberish;
    amount: BigNumberish;
    safetyDeposit: BigNumberish;
    timelocks: BigNumberish;
  };

  export type ImmutablesStructOutput = [
    orderHash: string,
    hashlock: string,
    maker: bigint,
    taker: bigint,
    token: bigint,
    amount: bigint,
    safetyDeposit: bigint,
    timelocks: bigint
  ] & {
    orderHash: string;
    hashlock: string;
    maker: bigint;
    taker: bigint;
    token: bigint;
    amount: bigint;
    safetyDeposit: bigint;
    timelocks: bigint;
  };
}

export interface IEscrowFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ESCROW_DST_IMPLEMENTATION"
      | "addressOfEscrowDst"
      | "createDstEscrow"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "DstEscrowCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "ESCROW_DST_IMPLEMENTATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addressOfEscrowDst",
    values: [IBaseEscrow.ImmutablesStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createDstEscrow",
    values: [IBaseEscrow.ImmutablesStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "ESCROW_DST_IMPLEMENTATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressOfEscrowDst",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDstEscrow",
    data: BytesLike
  ): Result;
}

export namespace DstEscrowCreatedEvent {
  export type InputTuple = [
    escrow: AddressLike,
    hashlock: BytesLike,
    taker: BigNumberish,
    creator: AddressLike,
    creatorType: BigNumberish
  ];
  export type OutputTuple = [
    escrow: string,
    hashlock: string,
    taker: bigint,
    creator: string,
    creatorType: bigint
  ];
  export interface OutputObject {
    escrow: string;
    hashlock: string;
    taker: bigint;
    creator: string;
    creatorType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IEscrowFactory extends BaseContract {
  connect(runner?: ContractRunner | null): IEscrowFactory;
  waitForDeployment(): Promise<this>;

  interface: IEscrowFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ESCROW_DST_IMPLEMENTATION: TypedContractMethod<[], [string], "view">;

  addressOfEscrowDst: TypedContractMethod<
    [immutables: IBaseEscrow.ImmutablesStruct],
    [string],
    "view"
  >;

  createDstEscrow: TypedContractMethod<
    [dstImmutables: IBaseEscrow.ImmutablesStruct],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ESCROW_DST_IMPLEMENTATION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addressOfEscrowDst"
  ): TypedContractMethod<
    [immutables: IBaseEscrow.ImmutablesStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "createDstEscrow"
  ): TypedContractMethod<
    [dstImmutables: IBaseEscrow.ImmutablesStruct],
    [void],
    "payable"
  >;

  getEvent(
    key: "DstEscrowCreated"
  ): TypedContractEvent<
    DstEscrowCreatedEvent.InputTuple,
    DstEscrowCreatedEvent.OutputTuple,
    DstEscrowCreatedEvent.OutputObject
  >;

  filters: {
    "DstEscrowCreated(address,bytes32,uint256,address,uint8)": TypedContractEvent<
      DstEscrowCreatedEvent.InputTuple,
      DstEscrowCreatedEvent.OutputTuple,
      DstEscrowCreatedEvent.OutputObject
    >;
    DstEscrowCreated: TypedContractEvent<
      DstEscrowCreatedEvent.InputTuple,
      DstEscrowCreatedEvent.OutputTuple,
      DstEscrowCreatedEvent.OutputObject
    >;
  };
}
