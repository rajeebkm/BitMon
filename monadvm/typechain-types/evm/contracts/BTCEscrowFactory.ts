/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace BTCEscrowFactory {
  export type BitcoinConfigStruct = {
    minConfirmations: BigNumberish;
    dustThreshold: BigNumberish;
    maxAmount: BigNumberish;
  };

  export type BitcoinConfigStructOutput = [
    minConfirmations: bigint,
    dustThreshold: bigint,
    maxAmount: bigint
  ] & { minConfirmations: bigint; dustThreshold: bigint; maxAmount: bigint };
}

export declare namespace IBaseEscrow {
  export type ImmutablesStruct = {
    orderHash: BytesLike;
    hashlock: BytesLike;
    maker: BigNumberish;
    taker: BigNumberish;
    token: BigNumberish;
    amount: BigNumberish;
    safetyDeposit: BigNumberish;
    timelocks: BigNumberish;
  };

  export type ImmutablesStructOutput = [
    orderHash: string,
    hashlock: string,
    maker: bigint,
    taker: bigint,
    token: bigint,
    amount: bigint,
    safetyDeposit: bigint,
    timelocks: bigint
  ] & {
    orderHash: string;
    hashlock: string;
    maker: bigint;
    taker: bigint;
    token: bigint;
    amount: bigint;
    safetyDeposit: bigint;
    timelocks: bigint;
  };
}

export interface BTCEscrowFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ACCESS_TOKEN"
      | "BTC_ESCROW_DST_IMPLEMENTATION"
      | "BTC_ESCROW_SRC_IMPLEMENTATION"
      | "addressOfEscrowDst"
      | "addressOfEscrowSrc"
      | "bitcoinConfig"
      | "createDstEscrow"
      | "createSrcEscrow"
      | "creationFee"
      | "owner"
      | "renounceOwnership"
      | "setBitcoinConfig"
      | "setCreationFee"
      | "setTreasury"
      | "transferOwnership"
      | "treasury"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BitcoinConfigUpdated"
      | "CreationFeeUpdated"
      | "DstEscrowCreated"
      | "OwnershipTransferred"
      | "SrcEscrowCreated"
      | "TreasuryUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ACCESS_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BTC_ESCROW_DST_IMPLEMENTATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BTC_ESCROW_SRC_IMPLEMENTATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addressOfEscrowDst",
    values: [IBaseEscrow.ImmutablesStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "addressOfEscrowSrc",
    values: [IBaseEscrow.ImmutablesStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "bitcoinConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createDstEscrow",
    values: [IBaseEscrow.ImmutablesStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createSrcEscrow",
    values: [IBaseEscrow.ImmutablesStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "creationFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBitcoinConfig",
    values: [BTCEscrowFactory.BitcoinConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ACCESS_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BTC_ESCROW_DST_IMPLEMENTATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BTC_ESCROW_SRC_IMPLEMENTATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressOfEscrowDst",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressOfEscrowSrc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bitcoinConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDstEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSrcEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBitcoinConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
}

export namespace BitcoinConfigUpdatedEvent {
  export type InputTuple = [config: BTCEscrowFactory.BitcoinConfigStruct];
  export type OutputTuple = [
    config: BTCEscrowFactory.BitcoinConfigStructOutput
  ];
  export interface OutputObject {
    config: BTCEscrowFactory.BitcoinConfigStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreationFeeUpdatedEvent {
  export type InputTuple = [oldFee: BigNumberish, newFee: BigNumberish];
  export type OutputTuple = [oldFee: bigint, newFee: bigint];
  export interface OutputObject {
    oldFee: bigint;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DstEscrowCreatedEvent {
  export type InputTuple = [
    escrow: AddressLike,
    hashlock: BytesLike,
    taker: BigNumberish,
    creator: AddressLike
  ];
  export type OutputTuple = [
    escrow: string,
    hashlock: string,
    taker: bigint,
    creator: string
  ];
  export interface OutputObject {
    escrow: string;
    hashlock: string;
    taker: bigint;
    creator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SrcEscrowCreatedEvent {
  export type InputTuple = [
    escrow: AddressLike,
    hashlock: BytesLike,
    maker: BigNumberish,
    creator: AddressLike
  ];
  export type OutputTuple = [
    escrow: string,
    hashlock: string,
    maker: bigint,
    creator: string
  ];
  export interface OutputObject {
    escrow: string;
    hashlock: string;
    maker: bigint;
    creator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasuryUpdatedEvent {
  export type InputTuple = [oldTreasury: AddressLike, newTreasury: AddressLike];
  export type OutputTuple = [oldTreasury: string, newTreasury: string];
  export interface OutputObject {
    oldTreasury: string;
    newTreasury: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BTCEscrowFactory extends BaseContract {
  connect(runner?: ContractRunner | null): BTCEscrowFactory;
  waitForDeployment(): Promise<this>;

  interface: BTCEscrowFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ACCESS_TOKEN: TypedContractMethod<[], [string], "view">;

  BTC_ESCROW_DST_IMPLEMENTATION: TypedContractMethod<[], [string], "view">;

  BTC_ESCROW_SRC_IMPLEMENTATION: TypedContractMethod<[], [string], "view">;

  addressOfEscrowDst: TypedContractMethod<
    [immutables: IBaseEscrow.ImmutablesStruct],
    [string],
    "view"
  >;

  addressOfEscrowSrc: TypedContractMethod<
    [immutables: IBaseEscrow.ImmutablesStruct],
    [string],
    "view"
  >;

  bitcoinConfig: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        minConfirmations: bigint;
        dustThreshold: bigint;
        maxAmount: bigint;
      }
    ],
    "view"
  >;

  createDstEscrow: TypedContractMethod<
    [immutables: IBaseEscrow.ImmutablesStruct],
    [void],
    "payable"
  >;

  createSrcEscrow: TypedContractMethod<
    [immutables: IBaseEscrow.ImmutablesStruct],
    [void],
    "payable"
  >;

  creationFee: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setBitcoinConfig: TypedContractMethod<
    [newConfig: BTCEscrowFactory.BitcoinConfigStruct],
    [void],
    "nonpayable"
  >;

  setCreationFee: TypedContractMethod<
    [newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTreasury: TypedContractMethod<
    [newTreasury: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  treasury: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ACCESS_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BTC_ESCROW_DST_IMPLEMENTATION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BTC_ESCROW_SRC_IMPLEMENTATION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addressOfEscrowDst"
  ): TypedContractMethod<
    [immutables: IBaseEscrow.ImmutablesStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "addressOfEscrowSrc"
  ): TypedContractMethod<
    [immutables: IBaseEscrow.ImmutablesStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "bitcoinConfig"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        minConfirmations: bigint;
        dustThreshold: bigint;
        maxAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createDstEscrow"
  ): TypedContractMethod<
    [immutables: IBaseEscrow.ImmutablesStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createSrcEscrow"
  ): TypedContractMethod<
    [immutables: IBaseEscrow.ImmutablesStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "creationFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBitcoinConfig"
  ): TypedContractMethod<
    [newConfig: BTCEscrowFactory.BitcoinConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCreationFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTreasury"
  ): TypedContractMethod<[newTreasury: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "BitcoinConfigUpdated"
  ): TypedContractEvent<
    BitcoinConfigUpdatedEvent.InputTuple,
    BitcoinConfigUpdatedEvent.OutputTuple,
    BitcoinConfigUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "CreationFeeUpdated"
  ): TypedContractEvent<
    CreationFeeUpdatedEvent.InputTuple,
    CreationFeeUpdatedEvent.OutputTuple,
    CreationFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DstEscrowCreated"
  ): TypedContractEvent<
    DstEscrowCreatedEvent.InputTuple,
    DstEscrowCreatedEvent.OutputTuple,
    DstEscrowCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SrcEscrowCreated"
  ): TypedContractEvent<
    SrcEscrowCreatedEvent.InputTuple,
    SrcEscrowCreatedEvent.OutputTuple,
    SrcEscrowCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TreasuryUpdated"
  ): TypedContractEvent<
    TreasuryUpdatedEvent.InputTuple,
    TreasuryUpdatedEvent.OutputTuple,
    TreasuryUpdatedEvent.OutputObject
  >;

  filters: {
    "BitcoinConfigUpdated(tuple)": TypedContractEvent<
      BitcoinConfigUpdatedEvent.InputTuple,
      BitcoinConfigUpdatedEvent.OutputTuple,
      BitcoinConfigUpdatedEvent.OutputObject
    >;
    BitcoinConfigUpdated: TypedContractEvent<
      BitcoinConfigUpdatedEvent.InputTuple,
      BitcoinConfigUpdatedEvent.OutputTuple,
      BitcoinConfigUpdatedEvent.OutputObject
    >;

    "CreationFeeUpdated(uint256,uint256)": TypedContractEvent<
      CreationFeeUpdatedEvent.InputTuple,
      CreationFeeUpdatedEvent.OutputTuple,
      CreationFeeUpdatedEvent.OutputObject
    >;
    CreationFeeUpdated: TypedContractEvent<
      CreationFeeUpdatedEvent.InputTuple,
      CreationFeeUpdatedEvent.OutputTuple,
      CreationFeeUpdatedEvent.OutputObject
    >;

    "DstEscrowCreated(address,bytes32,uint256,address)": TypedContractEvent<
      DstEscrowCreatedEvent.InputTuple,
      DstEscrowCreatedEvent.OutputTuple,
      DstEscrowCreatedEvent.OutputObject
    >;
    DstEscrowCreated: TypedContractEvent<
      DstEscrowCreatedEvent.InputTuple,
      DstEscrowCreatedEvent.OutputTuple,
      DstEscrowCreatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SrcEscrowCreated(address,bytes32,uint256,address)": TypedContractEvent<
      SrcEscrowCreatedEvent.InputTuple,
      SrcEscrowCreatedEvent.OutputTuple,
      SrcEscrowCreatedEvent.OutputObject
    >;
    SrcEscrowCreated: TypedContractEvent<
      SrcEscrowCreatedEvent.InputTuple,
      SrcEscrowCreatedEvent.OutputTuple,
      SrcEscrowCreatedEvent.OutputObject
    >;

    "TreasuryUpdated(address,address)": TypedContractEvent<
      TreasuryUpdatedEvent.InputTuple,
      TreasuryUpdatedEvent.OutputTuple,
      TreasuryUpdatedEvent.OutputObject
    >;
    TreasuryUpdated: TypedContractEvent<
      TreasuryUpdatedEvent.InputTuple,
      TreasuryUpdatedEvent.OutputTuple,
      TreasuryUpdatedEvent.OutputObject
    >;
  };
}
