/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IMerkleStorageInvalidator,
  IMerkleStorageInvalidatorInterface,
} from "../../../../monadvm/contracts/interfaces/IMerkleStorageInvalidator";

const _abi = [
  {
    inputs: [],
    name: "AccessDenied",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidProof",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    name: "lastValidated",
    outputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "secretHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IMerkleStorageInvalidator__factory {
  static readonly abi = _abi;
  static createInterface(): IMerkleStorageInvalidatorInterface {
    return new Interface(_abi) as IMerkleStorageInvalidatorInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IMerkleStorageInvalidator {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as IMerkleStorageInvalidator;
  }
}
